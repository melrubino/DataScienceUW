data = fillRateDf[group8,],
weights=size,
family = "binomial")
summary(mylogit8)
head(fillRateDf[group7,])
summary(mylogit7)
mysqlconnection <- odbcConnect("wt-chsql1","mrubino","gk84d9")
sqlData <- sqlQuery(mysqlconnection, "
SELECT i.incoming_dt, p.portfolio_name, o.filled_quantity,o.quantity , fillRate= o.filled_quantity/(o.quantity*1.0),
qw= pass.nbbo_ask_price - pass.nbbo_bid_price, o.price_improvement_amount,
nwt = CASE WHEN o.no_worse_price_increment > pass.nbbo_ask_price - pass.nbbo_bid_price - 0.01 THEN pass.nbbo_ask_price - pass.nbbo_bid_price - 0.01 ELSE o.no_worse_price_increment END,
pass.increment,
pass.router_decision_type,
pass.first_pass_trade_edge,
pass.trade_edge,
pass.marketable
FROM [PFOF].[dbo].[orders_archive_incoming_v2] i
INNER JOIN pfof.dbo.orders_archive_optimizer_passes_v2 pass on pass.incoming_dt = i.incoming_dt and pass.incoming_id = i.incoming_id
INNER JOIN Pfof.dbo.orders_archive_outgoing_v2 o on o.incoming_dt = pass.incoming_dt and o.incoming_id = pass.incoming_id and o.pass_id = pass.pass_id and o.level_id = pass.level_id
INNER JOIN PFOF.dbo.portfolios p on o.portfolio_id = p.portfolio_id
INNER JOIN firms f on f.firm_id = p.firm_id
WHERE i.incoming_dt between '4-1-13' and '5-7-13'
--and i.order_firm = 'SCHWAB-WEX'
and o.trade_mechanism = 11
and p.portfolio_name like '%SMRT%'
--and pass.marketable = 0
and o.rejection_code = 0
-- and pass.nbbo_ask_price - pass.nbbo_bid_price >= 0.02
-- and pass.nbbo_ask_price - pass.nbbo_bid_price > 0.01
-- and pass.nbbo_ask_price - pass.nbbo_bid_price - o.price_improvement_amount = 0.01
-- and pass.trade_edge - o.price_improvement_amount < 0.0080
")
odbcCloseAll()
fillRateDf <- data.frame(tradeDate=sqlData$incoming_dt,
fillRate=sqlData$fillRate,
qw=sqlData$qw,
size=sqlData$quantity,
startIncr=sqlData$price_improvement_amount,
tickSize=sqlData$increment,
nwt=sqlData$nwt,
tradeEdge=sqlData$trade_edge,
routerDecision=sqlData$router_decision_type,
qwMinusStart=sqlData$qw-sqlData$price_improvement_amount,
qwMinusNwt=sqlData$qw - sqlData$nwt,
marketable=sqlData$marketable,
teMinusStartIncr=sqlData$trade_edge-sqlData$price_improvement_amount)
isMarketable <- fillRateDf$marketable==1
startIncrEqZero <- fillRateDf$startIncr==0
qwLeqPenny <- fillRateDf$qw <= 0.01
qwMinusStartIncrLeqPenny <- fillRateDf$qw - fillRateDf$startIncr <= 0.01
teMinusStartIncrLeqPenny <- fillRateDf$tradeEdge - fillRateDf$startIncr <= 0.01
# Fill Rate Variable Groups
group1 <- !isMarketable & startIncrEqZero
group2 <- !isMarketable & !startIncrEqZero
group3 <- isMarketable & qwLeqPenny & teMinusStartIncrLeqPenny
group4 <- isMarketable & qwLeqPenny & !teMinusStartIncrLeqPenny
group5 <- isMarketable & !qwLeqPenny & qwMinusStartIncrLeqPenny & teMinusStartIncrLeqPenny
group6 <- isMarketable & !qwLeqPenny & qwMinusStartIncrLeqPenny & !teMinusStartIncrLeqPenny
group7 <- isMarketable & !qwLeqPenny & !qwMinusStartIncrLeqPenny & teMinusStartIncrLeqPenny
group8 <- isMarketable & !qwLeqPenny & !qwMinusStartIncrLeqPenny & !teMinusStartIncrLeqPenny
# Determine Logit model ceofficients
prob.1 <- sum(fillRateDf[group1,]$size * fillRateDf[group1,]$fillRate) / sum(fillRateDf[group1,]$size)
prob.2 <- sum(fillRateDf[group2,]$size * fillRateDf[group2,]$fillRate) / sum(fillRateDf[group2,]$size)
prob.3 <- sum(fillRateDf[group3,]$size * fillRateDf[group3,]$fillRate) / sum(fillRateDf[group3,]$size)
prob.4 <- sum(fillRateDf[group4,]$size * fillRateDf[group4,]$fillRate) / sum(fillRateDf[group4,]$size)
prob.5 <- sum(fillRateDf[group5,]$size * fillRateDf[group5,]$fillRate) / sum(fillRateDf[group5,]$size)
prob.6 <- sum(fillRateDf[group6,]$size * fillRateDf[group6,]$fillRate) / sum(fillRateDf[group6,]$size)
prob.7 <- sum(fillRateDf[group7,]$size * fillRateDf[group7,]$fillRate) / sum(fillRateDf[group7,]$size)
prob.8 <- sum(fillRateDf[group8,]$size * fillRateDf[group8,]$fillRate) / sum(fillRateDf[gro
c(prob.1, sum(group1))
c(prob.2, sum(group2))
c(prob.3, sum(group3))
c(prob.4, sum(group4))
c(prob.5, sum(group5))
c(prob.6, sum(group6))
c(prob.7, sum(group7))
c(prob.8, sum(group8))
c(prob.1, sum(group1))
c(prob.2, sum(group2))
c(prob.3, sum(group3))
c(prob.4, sum(group4))
c(prob.5, sum(group5))
c(prob.6, sum(group6))
c(prob.7, sum(group7))
c(prob.8, sum(group8))
coef.7.constant <- log(prob.7/(1-prob.7))
coef.7.constant
install.packages("R2html")
install.packages("R2HTML")
rm(list = ls());
setwd("C:/tmp");
x = 1:10;
y = 1:10;
mydata = list(x=x, y=y);
library(R2HTML)
HTMLStart(outdir="C:/tmp", file="myreport", extension="html", echo=FALSE, HTMLframe=TRUE)
HTMLStart(outdir="C:/temp", file="myreport", extension="html", echo=FALSE, HTMLframe=TRUE)
HTMLStop()
exit
quit
help
q
q()
load("C:/R/Work/AckTimes/Ack.Rdata")
library(data.table)
library(lattice)
library(RColorBrewer)
summary(AckData.tb)
display.brewer.all()
cols <- brewer.pal(n=9,"YlGnBu")
set.cols <- list(#superpose.polygon=list(col=cols[5:8], border="transparent"),
strip.background=list(col=cols[8]),
strip.border=list(col="black"))
AckData.tb.all <- AckData.tb
wsack.panel.all <- function(x,...) {
panel.histogram(x,...)
panel.abline(v=mean(x), lwd = 3, col.line = 2)
panel.abline(v=mean(x)+2*sd(x), lwd = 3, lty=2, col.line = 2)
panel.abline(v=median(x), lwd = 3, col.line = 3)
panel.text(x=mean(x),y=4,labels="mean of acks", col=2, pos=4)
panel.text(x=median(x),y=3.5,labels="median of acks", col=3, pos=4)
panel.text(x=mean(x)+2*sd(x),y=4,labels="2SD + mean of acks", col=2, pos=2)
}
wshist.all <- histogram(~ ws_ack | route_name
, data=AckData.tb.all
, panel = wsack.panel.all
, col = as.character(set.cols$strip.background)
, xlim = c(0,8)
, nint = 1000
, xlab = "wormsserv acks, milliseconds"
, main = "WormsServer Ack Times"
,par.settings = set.cols
,par.strip.text =list(col="gold", font=2))
print(wshist.all)
View(AckData.tb.all)
fivenum(AckData.tb.all$gw_ack[AckData.tb.all$route_name=="CBOE-OPT"])
fivenum(AckData.tb.all$gw_ack[AckData.tb.all$route_name=="MIAX-OPT"])
IQR(AckData.tb.all$gw_ack[AckData.tb.all$route_name=="CBOE-OPT"])
IQR(AckData.tb.all$gw_ack[AckData.tb.all$route_name=="MIAX-OPT"])
remove(AckData.tb.all)
View(AckData.tb)
View(AckData.tb)
mean(AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"])
summary(AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"])
sd(AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"])
library(ggplot2)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
mean(x)
summary(x)
sd(x)
qplot(x, geom="histogram")
qplot(x, geom="histogram", binwidth=.1)
qplot(x, geom="histogram", binwidth=1)
qplot(x[x<20], geom="histogram", binwidth=1)
qplot(x[x<20], geom="histogram", binwidth=.1)
qplot(x[x<3], geom="histogram", binwidth=.1)
qplot(x[x<1], geom="histogram", binwidth=.1)
qplot(x[x<1], geom="histogram", binwidth=.01)
qplot(x[x<1], geom="histogram", binwidth=.01, xlim=c(0,1))
x <- x[x<1] # removing outliers
mean(x)
summary(x)
sd(x)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
mean(x)
summary(x)
sd(x)
## histogram:  whoa!  crazy outliers!
qplot(x, geom="histogram", binwidth=.01, xlim=c(0,1))
qplot(x, geom="histogram")
y <- AckData.tb$gw_ack[AckData.tb$route_name=="CBOE-OPT"]
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
mean(x)
sd(x)
summary(x)
mean(y)
sd(y)
summary(y)
length(x)
length(y)
x <- x[x<1]
qplot(x, geom="histogram", binwidth=.01, xlim=c(0,1))
qplot(x, geom="histogram", binwidth=.01, xlim=c(0,1), xlab="ms")
qplot(x, geom="histogram", binwidth=.01, xlim=c(0,1), xlab="ms", ylab="count")
mean(x)
summary(x)
sd(x)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
qplot(x, geom="histogram", binwidth=.01, xlim=c(0,1), xlab="ms", ylab="count")
qplot(x, geom="histogram")
qplot(x, geom="histogram", xlab="ms", ylab="count")
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
summary(x)
summary(x)[4]
summary(x)[5]
summary(x)[2]
summary(x)[5] - summary(x)[2] #IQR
x <- x[x<1]
mean(x)
sd(x)
summary(x)
summary(x)[5] - summary(x)[2] #IQR
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
qplot(x, geom="boxplot")
qplot(route_name, gw_ack, data=AckData.tb, geom="boxplot")
qplot(route_name, gw_ack, data=AckData.tb[AckData.tb<10], geom="boxplot")
qplot(route_name, gw_ack, data=AckData.tb[AckData.tb$gw_ack<10], geom="boxplot")
f <- AckData.tb[AckData.tb$gw_ack<10]
AckData.tb$gw_ack<10
f <- AckData.tb[AckData.tb$gw_ack<10]
f <- AckData.tb[AckData.tb$gw_ack<10][]
f <- AckData.tb(AckData.tb$gw_ack<10)
qplot(route_name, gw_ack, data=AckData.tb[AckData.tb$gw_ack<10,], geom="boxplot")
load("C:/R/Work/AckTimes/Ack.Rdata")
library(ggplot2)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
mad(x)
help(mad)
sd(x)
y <- AckData.tb$gw_ack[AckData.tb$route_name=="CBOE-OPT"]
mad(y)
x <- x[x<1]
sd(x)
mad(x)
MAD=function(x)
{ sum(abs(x-mean(x)))/length(x) }
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
MAD(x)
mad(x)
y <- AckData.tb$gw_ack[AckData.tb$route_name=="CBOE-OPT"]
mad(y)
MAD(y)
x <- x[x<1]
mad(y)
mad(x)
MAD(x)
library(openintro)
data(ageAtMar)
y <- ageAtMar$age
qqnorm(y); qqline(y)
qplot(y, geom="histogram")
qplot(y, geom="histogram")
+ geom_vline(xintercept=mean(y)+sd(y), color="green")
+ geom_vline(xintercept=mean(y)-sd(y), color="green") + geom_vline(xintercept=mean(y), color="red")
p <- rank(y)/length(y)
l <- mean(y) - 2*sd(y)
h <- mean(y) + 2*sd(y)
l
h
ecdf(y)(l)
ecdf(y)(h)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
x <- x[x<1]
mean(x)
sd(x)
2*sd(x) # compare 2*sd value to its percentile rank
ecdf(x)(2sd(x))
ecdf(x)(2*sd(x))
ecdf(x)(.09)
ecdf(x)(mean(x)+sd(x))
mean(x) + 2*sd(x) # compare 2*sd value to its percentile rank
mean(x)
2*sd(x) # compare 2*sd value to its percentile rank
ecdf(x)(mean(x)+sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
ecdf(x)(mean(x)-2*sd(x))  #
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
mean(x)
2*sd(x) # compare 2*sd value to its percentile rank
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
x <- x[x<1]
mean(x)
2*sd(x) # compare 2*sd value to its percentile rank
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
qqnorm(x); qqline(x)
qplot(x, geom="histogram")
qplot(x, geom="histogram")
+ geom_vline(xintercept=mean(x)+sd(x), color="green")
+ geom_vline(xintercept=mean(x)-sd(x), color="green") + geom_vline(xintercept=mean(x), color="red")
library(ggplot2)
qqnorm(x); qqline(x)
qplot(x, geom="histogram")
qplot(x, geom="histogram")
+ geom_vline(xintercept=mean(x)+sd(x), color="green")
+ geom_vline(xintercept=mean(x)-sd(x), color="green") + geom_vline(xintercept=mean(x), color="red")
qplot(x, geom="histogram")
+ geom_vline(xintercept=mean(x)+sd(x), color="green")
+ geom_vline(xintercept=mean(x)-sd(x), color="green") + geom_vline(xintercept=mean(x), color="red")
qplot(y, geom="histogram")
qplot(y, geom="histogram")
+ geom_vline(xintercept=mean(y)+sd(y), color="green")
+ geom_vline(xintercept=mean(y)-sd(y), color="green") + geom_vline(xintercept=mean(y), color="red")
mean(x)
2*sd(x) # compare 2*sd value to its percentile rank
qplot(x, geom="histogram")
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
ecdf(x)(mean(x)+1*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
library(ggplot2)
qplot(x, geom="histogram")
+ geom_vline(xintercept=mean(x)+sd(x), color="green")
+ geom_vline(xintercept=mean(x)-sd(x), color="green") + geom_vline(xintercept=mean(x), color="red")
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
mean(x) + 2*sd(x) # compare 2*sd value to its percentile rank
qplot(x, geom="histogram") + geom_vline(xintercept=mean(x)+sd(x), color="green")
qplot(x, geom="histogram")
+ geom_vline(xintercept=mean(x)+sd(x), color="green")
qplot(x, geom="histogram")
geom_vline(xintercept=mean(x)+sd(x), color="green")
qplot(x, geom="histogram") + geom_vline(xintercept=mean(x)+sd(x), color="green") + geom_vline(xintercept=mean(x)-sd(x), color="green") + geom_vline(xintercept=mean(x), color="red")
qplot(x, geom="histogram") +
geom_vline(xintercept=mean(x)+sd(x), color="green") +
geom_vline(xintercept=mean(x)-sd(x), color="green") +
geom_vline(xintercept=mean(x), color="red")
qplot(x, geom="histogram") +
geom_vline(xintercept=mean(x)+2*sd(x), color="green") +
geom_vline(xintercept=mean(x)-2*sd(x), color="green") +
geom_vline(xintercept=mean(x), color="red")
qplot(x, geom="histogram") +
geom_vline(xintercept=mean(x)+2*sd(x), color="green", show_guide=TRUE) +
geom_vline(xintercept=mean(x)-2*sd(x), color="green") +
geom_vline(xintercept=mean(x), color="red")
cuts <- rbind(data.frame(Thresholds="Mean", values=mean(x)),
data.frame(Thresholds="1 SD", values=c(mean(x)-sd(x), mean(x)+sd(x))),
data.frame(Thresholds="2 SD", values=c(mean(x)-2*sd(x), mean(x)+2*sd(x))))
cuts
qplot(x, geom="histogram") +
geom_vline(data=cuts, aes(xintercept=cuts, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x, geom="histogram") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x, geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
ecdf(x)(mean(x)+2*sd(x))  #percentile rank of +2sd above mean; if normal should be 95%+2.5% = 97.5%
qqnorm(x); qqline(x)
qplot(x, geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qqnorm(x); qqline(x)
qplot(x, geom="histogram", xlab="ms", ylab="count")
mean(x) + 2*sd(x) # compare 2*sd value to its percentile rank
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
length(x)
mean(X)+2*sd(x)
mean(x)+2*sd(x)
length(x[x<mean(x)+2*sd(x)])
length(x[x>mean(x)+2*sd(x)])
cuts <- rbind(data.frame(Thresholds="Mean", values=mean(x)),
data.frame(Thresholds="1 SD", values=c(mean(x)-sd(x), mean(x)+sd(x))),
data.frame(Thresholds="2 SD", values=c(mean(x)-2*sd(x), mean(x)+2*sd(x))))
cuts
qplot(x[x<4.25], geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<1], geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x, geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<4.25], geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<5], geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
cuts <- rbind(data.frame(Thresholds="Mean", values=mean(x)),
data.frame(Thresholds="1 SD", values=c(mean(x)-sd(x), mean(x)+sd(x))),
data.frame(Thresholds="2 SD", values=c(mean(x)-2*sd(x), mean(x)+2*sd(x))),
data.frame(Thresholds="3 SD", values=c(mean(x)-2*sd(x), mean(x)+3*sd(x))))
cuts
qplot(x[x<10], geom="histogram", xlab="ms", ylab="count") +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<10], geom="histogram", xlab="ms", ylab="count", binwidth=.01) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<10], geom="histogram", xlab="ms", ylab="count", binwidth=.1) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
length(x[x>mean(x)+3*sd(x)])
median(x)
x <- AckData.tb$gw_ack[AckData.tb$route_name=="MIAX-OPT"]
median(x)
summary(x)
help(quartile)
q1 <- summary(x)[2]
q3 <- summary(x)[5]
q1
q3
iqr <- summary(x)[5] - summary(x)[2] #IQR
iqr
q1 + 1.5*iqr
cuts <- rbind(data.frame(Thresholds="Median", values=median(x)),
data.frame(Thresholds="1.5 IQR", values=c(q1 - 1.5*iqr, q3 + 1.5*iqr)),
data.frame(Thresholds="2 SD", values=c(q1 - 3*iqr, q3 + 3*iqr)))
cuts
cuts <- rbind(data.frame(Thresholds="Median", values=median(x)),
data.frame(Thresholds="1.5 IQR", values=c(q1 - 1.5*iqr, q3 + 1.5*iqr)),
data.frame(Thresholds="3 IQR", values=c(q1 - 3*iqr, q3 + 3*iqr)))
cuts
qplot(x[x<10], geom="histogram", xlab="ms", ylab="count", binwidth=.1) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
qplot(x[x<1], geom="histogram", xlab="ms", ylab="count", binwidth=.1) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
iqr
qplot(x[x<1], geom="histogram", xlab="ms", ylab="count", binwidth=.01) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
length(x[x>q3+1.5*iqr])
length(x[x>q3+3*iqr])
length(x[x>10])
cuts <- data.frame(Thresholds="Business Goal", values=10)
qplot(x[x<15], geom="histogram", xlab="ms", ylab="count", binwidth=.01) +
geom_vline(data=cuts, aes(xintercept=values, linetype=Thresholds, colour=Thresholds), show_guide=TRUE)
q1
q3
sqrt(65000)
.13/254
load("C:/R/Work/MarketShare/MktShare.RData")
View(mktshare_dta)
View(mktshare_dta)
View(mktshare_dta)
mktshare_dta.tb <- data.table(mktshare_dta)
summary(mktshare_dta.tb)
library(ggplot2)
View(mktshare_dta)
View(mktshare_dta)
summary(mktshare_dta)
df <- mktshare_dta
summary(df[df$Exchange=="B" AND df$timeframe == "today"])
summary(df[df$Exchange=="B" & df$timeframe == "today"])
summary(df[df$Exchange=="B" & df$timeframe == "today"],)
summary(df[df$Exchange=="B" & df$timeframe == "today",])
summary(df[df$Exchange=="B" & df$timeframe == "20day",])
Bdf <- summary(df[df$Exchange=="B" & df$timeframe == "20day",])
Bdf$trades_wlv / Bdf$trades
Bdf$trades_wlv
Bdf <- df[df$Exchange=="B" & df$timeframe == "20day",]
Bdf$trades_wlv / Bdf$trades
B_tradesmarketshare <- Bdf$trades_wlv / Bdf$trades
B_tms <- Bdf$trades_wlv / Bdf$trades
qplot(B_tms, geom="histogram")
qplot(B_tms, geom="histogram", xlim=c(0,1))
qqnorm(B_tms); qqline(B_tms)
shapiro(B_tms)
shapiro.test(B_tms)
qplot(B_tms, geom="histogram", xlim=c(0,1))
load("C:/R/Work/MarketShare/MktShare.RData")
library(ggplot2)
df <- mktshare_dta
summary(df)
Bdf <- df[df$Exchange=="B" & df$timeframe == "20day",]
B_tms <- Bdf$trades_wlv / Bdf$trades
qplot(B_tms, geom="histogram", xlim=c(0,1))
qqnorm(B_tms); qqline(B_tms)
getwd()
setwd("C:/Python/DataScienceCoursera/assignment5")
data <- read.csv("seaflow_21min.csv")
summary(data)
nrow(data)
set.seed(1234)
samplesize <- floor(nrow(data)*0.5)
testidx <- sample(seq_len(nrow(data)), size=samplesize, replace=FALSE)
testdata <- data[testidx,]
traindata <- data[-testidx,]
meantime_train <- mean(traindata[,"time"])
## Plot pe by chl_small, color by pop
library(ggplot2)
qplot(pe, chl_small, data=traindata, colour=pop)
## Train a decision tree
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_small + chl_big)
model <- rpart(fol, method="class", data=traindata)
print(model)
## Evaluate decision tree on test data
tree_pred <- predict(object=model, newdata=testdata, type="class")
numcorrect <- sum(tree_pred == testdata[,"pop"])
accuracy <- numcorrect / nrow(testdata)
library(randomForest)
model <- randomForest(fol, data=traindata)
forest_pred <- predict(object=model, newdata=testdata, type="class")
numcorrect <- sum(forest_pred == testdata[,"pop"])
accuracy <- numcorrect / nrow(testdata)
importance(model)
library(e1071)
model <- svm(fol, data=traindata)
svm_pred <- predict(object=model, newdata=testdata, type="class")
numcorrect <- sum(svm_pred == testdata[,"pop"])
accuracy <- numcorrect / nrow(testdata)
table(pred=tree_pred, true=testdata[,"pop"])
table(pred=forest_pred, true=testdata[,"pop"])
table(pred=svm_pred, true=testdata[,"pop"])
qplot(pe, data=traindata, geom="histogram")
qplot(data=traindata, geom="histogram")
qplot(fsc_small,data=traindata, geom="histogram")
qplot(fsc_small,data=data, geom="histogram")
qplot(fsc_perp,data=data, geom="histogram")
qplot(fsc_big,data=data, geom="histogram")
qplot(time, chl_big, data=data)
clean_data <- data[data$file_id!=208,]
qplot(time, chl_big, data=clean_data)
qplot(time, chl_big, data=data, colour=pop)
set.seed(1234)
samplesize <- floor(nrow(clean_data)*0.5)
testidx_clean <- sample(seq_len(nrow(clean_data)), size=samplesize, replace=FALSE)
testdata_clean <- data[testidx_clean,]
traindata_clean <- data[-testidx_clean,]
model <- svm(fol, data=traindata_clean)
svm_pred_clean <- predict(object=model, newdata=testdata_clean, type="class")
numcorrect <- sum(svm_pred_clean == testdata_clean[,"pop"])
accuracy <- numcorrect / nrow(testdata_clean)
print(model)
summary(model)
linearsvmmodel <- svm(fol, data=traindata_clean, kernal="linear")
linearsvm_pred_clean <- predict(linearsvmmodel, newdata=testdata_clean, type="class")
sum(linearsvm_pred_clean == testdata_clean["pop"])
sum(linearsvm_pred_clean == testdata_clean[,"pop"])
sum(linearsvm_pred_clean == testdata_clean[,"pop"])/nrow(testdata_clean)
summary(linearsvmmodel)
linearsvmmodel <- svm(fol, data=traindata_clean, kernel="linear")
linearsvm_pred_clean <- predict(linearsvmmodel, newdata=testdata_clean, type="class")
numcorrect <- sum(linearsvm_pred_clean == testdata_clean[,"pop"])
accuracy <- numcorrect / nrow(testdata_clean)
